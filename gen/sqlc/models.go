// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ResourceTypes string

const (
	ResourceTypesUSERAGENT ResourceTypes = "USER_AGENT"
	ResourceTypesPROXY     ResourceTypes = "PROXY"
)

func (e *ResourceTypes) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ResourceTypes(s)
	case string:
		*e = ResourceTypes(s)
	default:
		return fmt.Errorf("unsupported scan type for ResourceTypes: %T", src)
	}
	return nil
}

type NullResourceTypes struct {
	ResourceTypes ResourceTypes
	Valid         bool // Valid is true if ResourceTypes is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullResourceTypes) Scan(value interface{}) error {
	if value == nil {
		ns.ResourceTypes, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ResourceTypes.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullResourceTypes) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ResourceTypes), nil
}

type SubscriptionPlanIntervals string

const (
	SubscriptionPlanIntervalsMONTHLY SubscriptionPlanIntervals = "MONTHLY"
	SubscriptionPlanIntervalsYEARLY  SubscriptionPlanIntervals = "YEARLY"
)

func (e *SubscriptionPlanIntervals) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SubscriptionPlanIntervals(s)
	case string:
		*e = SubscriptionPlanIntervals(s)
	default:
		return fmt.Errorf("unsupported scan type for SubscriptionPlanIntervals: %T", src)
	}
	return nil
}

type NullSubscriptionPlanIntervals struct {
	SubscriptionPlanIntervals SubscriptionPlanIntervals
	Valid                     bool // Valid is true if SubscriptionPlanIntervals is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSubscriptionPlanIntervals) Scan(value interface{}) error {
	if value == nil {
		ns.SubscriptionPlanIntervals, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SubscriptionPlanIntervals.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSubscriptionPlanIntervals) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SubscriptionPlanIntervals), nil
}

type SubscriptionStatuses string

const (
	SubscriptionStatusesACTIVE   SubscriptionStatuses = "ACTIVE"
	SubscriptionStatusesCANCELED SubscriptionStatuses = "CANCELED"
	SubscriptionStatusesEXPIRED  SubscriptionStatuses = "EXPIRED"
	SubscriptionStatusesTRIALING SubscriptionStatuses = "TRIALING"
)

func (e *SubscriptionStatuses) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SubscriptionStatuses(s)
	case string:
		*e = SubscriptionStatuses(s)
	default:
		return fmt.Errorf("unsupported scan type for SubscriptionStatuses: %T", src)
	}
	return nil
}

type NullSubscriptionStatuses struct {
	SubscriptionStatuses SubscriptionStatuses
	Valid                bool // Valid is true if SubscriptionStatuses is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSubscriptionStatuses) Scan(value interface{}) error {
	if value == nil {
		ns.SubscriptionStatuses, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SubscriptionStatuses.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSubscriptionStatuses) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SubscriptionStatuses), nil
}

type AccountTelegram struct {
	ID           int64
	TelegramID   int64
	IsBot        bool
	FirstName    string
	LastName     string
	Username     pgtype.Text
	LanguageCode string
	PhotoUrl     pgtype.Text
	IsPremium    bool
	CreatedAt    pgtype.Timestamptz
}

type ResourceResource struct {
	ID       int64
	Resource string
	Type     ResourceTypes
	Attempts int32
	Failed   int32
	Disabled bool
	LastUsed pgtype.Timestamptz
}

type SubscriptionInvoice struct {
	ID             string
	SubscriptionID string
	Amount         float64
	IssuedAt       pgtype.Timestamptz
	Paid           bool
}

type SubscriptionPlan struct {
	ID          string
	Name        string
	Price       float64
	Interval    SubscriptionPlanIntervals
	Description pgtype.Text
}

type SubscriptionSubscription struct {
	ID        string
	AccountID int64
	PlanID    string
	Status    SubscriptionStatuses
	StartDate pgtype.Timestamptz
	EndDate   pgtype.Timestamptz
	CancelAt  pgtype.Timestamptz
}
