// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: subscriptions.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countSubscriptions = `-- name: CountSubscriptions :one
SELECT COUNT(id)
FROM "subscription"."subscriptions"
WHERE (
  (account_id = $1 OR $1 IS NULL) AND
  (plan_id = $2 OR $2 IS NULL) AND
  (status = $3 OR $3 IS NULL) AND
  (start_date >= $4 OR $4 IS NULL) AND
  (start_date <= $5 OR $5 IS NULL) AND
  (end_date >= $6 OR $6 IS NULL) AND
  (end_date <= $7 OR $7 IS NULL) AND
  (cancel_at >= $8 OR $8 IS NULL) AND
  (cancel_at <= $9 OR $9 IS NULL)
)
`

type CountSubscriptionsParams struct {
	AccountID     pgtype.Int8
	PlanID        pgtype.Text
	Status        NullSubscriptionStatuses
	StartDateFrom pgtype.Timestamptz
	StartDateTo   pgtype.Timestamptz
	EndDateFrom   pgtype.Timestamptz
	EndDateTo     pgtype.Timestamptz
	CancelAtFrom  pgtype.Timestamptz
	CancelAtTo    pgtype.Timestamptz
}

func (q *Queries) CountSubscriptions(ctx context.Context, arg CountSubscriptionsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countSubscriptions,
		arg.AccountID,
		arg.PlanID,
		arg.Status,
		arg.StartDateFrom,
		arg.StartDateTo,
		arg.EndDateFrom,
		arg.EndDateTo,
		arg.CancelAtFrom,
		arg.CancelAtTo,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO "subscription"."subscriptions" (account_id, plan_id, status, start_date, end_date, cancel_at)
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6
)
RETURNING id, account_id, plan_id, status, start_date, end_date, cancel_at
`

type CreateSubscriptionParams struct {
	AccountID int64
	PlanID    string
	Status    SubscriptionStatuses
	StartDate pgtype.Timestamptz
	EndDate   pgtype.Timestamptz
	CancelAt  pgtype.Timestamptz
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (SubscriptionSubscription, error) {
	row := q.db.QueryRow(ctx, createSubscription,
		arg.AccountID,
		arg.PlanID,
		arg.Status,
		arg.StartDate,
		arg.EndDate,
		arg.CancelAt,
	)
	var i SubscriptionSubscription
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.PlanID,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
		&i.CancelAt,
	)
	return i, err
}

const deleteSubscription = `-- name: DeleteSubscription :exec
DELETE FROM "subscription"."subscriptions"
WHERE id = $1
`

func (q *Queries) DeleteSubscription(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteSubscription, id)
	return err
}

const getSubscription = `-- name: GetSubscription :one
SELECT subscription.id, subscription.account_id, subscription.plan_id, subscription.status, subscription.start_date, subscription.end_date, subscription.cancel_at
FROM "subscription"."subscriptions" subscription
WHERE id = $1
`

func (q *Queries) GetSubscription(ctx context.Context, id string) (SubscriptionSubscription, error) {
	row := q.db.QueryRow(ctx, getSubscription, id)
	var i SubscriptionSubscription
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.PlanID,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
		&i.CancelAt,
	)
	return i, err
}

const listSubscriptions = `-- name: ListSubscriptions :many
SELECT subscription.id, subscription.account_id, subscription.plan_id, subscription.status, subscription.start_date, subscription.end_date, subscription.cancel_at
FROM "subscription"."subscriptions" subscription
WHERE (
  (account_id = $1 OR $1 IS NULL) AND
  (plan_id = $2 OR $2 IS NULL) AND
  (status = $3 OR $3 IS NULL) AND
  (start_date >= $4 OR $4 IS NULL) AND
  (start_date <= $5 OR $5 IS NULL) AND
  (end_date >= $6 OR $6 IS NULL) AND
  (end_date <= $7 OR $7 IS NULL) AND
  (cancel_at >= $8 OR $8 IS NULL) AND
  (cancel_at <= $9 OR $9 IS NULL)
)
ORDER BY
  CASE WHEN $10::text = 'id_asc' THEN id END ASC,
  CASE WHEN $10 = 'id_desc' THEN id END DESC,
  CASE WHEN $10 = 'start_date_asc' THEN start_date END ASC,
  CASE WHEN $10 = 'start_date_desc' THEN start_date END DESC,
  CASE WHEN $10 = 'end_date_asc' THEN end_date END ASC,
  CASE WHEN $10 = 'end_date_desc' THEN end_date END DESC,
  CASE WHEN $10 = 'cancel_at_asc' THEN cancel_at END ASC,
  CASE WHEN $10 = 'cancel_at_desc' THEN cancel_at END DESC,
  start_date DESC
LIMIT $12
OFFSET $11
`

type ListSubscriptionsParams struct {
	AccountID     pgtype.Int8
	PlanID        pgtype.Text
	Status        NullSubscriptionStatuses
	StartDateFrom pgtype.Timestamptz
	StartDateTo   pgtype.Timestamptz
	EndDateFrom   pgtype.Timestamptz
	EndDateTo     pgtype.Timestamptz
	CancelAtFrom  pgtype.Timestamptz
	CancelAtTo    pgtype.Timestamptz
	OrderBy       string
	Offset        int32
	Limit         int32
}

func (q *Queries) ListSubscriptions(ctx context.Context, arg ListSubscriptionsParams) ([]SubscriptionSubscription, error) {
	rows, err := q.db.Query(ctx, listSubscriptions,
		arg.AccountID,
		arg.PlanID,
		arg.Status,
		arg.StartDateFrom,
		arg.StartDateTo,
		arg.EndDateFrom,
		arg.EndDateTo,
		arg.CancelAtFrom,
		arg.CancelAtTo,
		arg.OrderBy,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubscriptionSubscription
	for rows.Next() {
		var i SubscriptionSubscription
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.PlanID,
			&i.Status,
			&i.StartDate,
			&i.EndDate,
			&i.CancelAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubscription = `-- name: UpdateSubscription :one
UPDATE "subscription"."subscriptions"
SET
  account_id = COALESCE($2, account_id),
  plan_id = COALESCE($3, plan_id),
  status = COALESCE($4, status),
  start_date = COALESCE($5, start_date),
  end_date = CASE WHEN $6::boolean THEN NULL ELSE COALESCE($7, end_date) END,
  cancel_at = CASE WHEN $8::boolean THEN NULL ELSE COALESCE($9, cancel_at) END
WHERE id = $1
RETURNING id, account_id, plan_id, status, start_date, end_date, cancel_at
`

type UpdateSubscriptionParams struct {
	ID           string
	AccountID    pgtype.Int8
	PlanID       pgtype.Text
	Status       NullSubscriptionStatuses
	StartDate    pgtype.Timestamptz
	NullEndDate  bool
	EndDate      pgtype.Timestamptz
	NullCancelAt bool
	CancelAt     pgtype.Timestamptz
}

func (q *Queries) UpdateSubscription(ctx context.Context, arg UpdateSubscriptionParams) (SubscriptionSubscription, error) {
	row := q.db.QueryRow(ctx, updateSubscription,
		arg.ID,
		arg.AccountID,
		arg.PlanID,
		arg.Status,
		arg.StartDate,
		arg.NullEndDate,
		arg.EndDate,
		arg.NullCancelAt,
		arg.CancelAt,
	)
	var i SubscriptionSubscription
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.PlanID,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
		&i.CancelAt,
	)
	return i, err
}
