// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_agent.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countUserAgents = `-- name: CountUserAgents :one
SELECT COUNT(user_agent)
FROM "account"."user_agents"
WHERE (
  (good = $1 OR $1 IS NULL)
)
`

func (q *Queries) CountUserAgents(ctx context.Context, good pgtype.Bool) (int64, error) {
	row := q.db.QueryRow(ctx, countUserAgents, good)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUserAgent = `-- name: CreateUserAgent :one
INSERT INTO "account"."user_agents" (user_agent, good)
VALUES ($1, $2)
RETURNING user_agent, good
`

type CreateUserAgentParams struct {
	UserAgent string
	Good      bool
}

func (q *Queries) CreateUserAgent(ctx context.Context, arg CreateUserAgentParams) (AccountUserAgent, error) {
	row := q.db.QueryRow(ctx, createUserAgent, arg.UserAgent, arg.Good)
	var i AccountUserAgent
	err := row.Scan(&i.UserAgent, &i.Good)
	return i, err
}

const deleteUserAgent = `-- name: DeleteUserAgent :exec
DELETE FROM "account"."user_agents"
WHERE user_agent = $1
`

func (q *Queries) DeleteUserAgent(ctx context.Context, userAgent string) error {
	_, err := q.db.Exec(ctx, deleteUserAgent, userAgent)
	return err
}

const getUserAgent = `-- name: GetUserAgent :one
SELECT user_agent, good
FROM "account"."user_agents"
WHERE user_agent = $1
`

func (q *Queries) GetUserAgent(ctx context.Context, userAgent string) (AccountUserAgent, error) {
	row := q.db.QueryRow(ctx, getUserAgent, userAgent)
	var i AccountUserAgent
	err := row.Scan(&i.UserAgent, &i.Good)
	return i, err
}

const listUserAgents = `-- name: ListUserAgents :many
SELECT user_agent, good
FROM "account"."user_agents"
WHERE (
  (good = $1 OR $1 IS NULL)
)
ORDER BY $2 DESC
LIMIT $4
OFFSET $3
`

type ListUserAgentsParams struct {
	Good    pgtype.Bool
	OrderBy interface{}
	Offset  int32
	Limit   int32
}

func (q *Queries) ListUserAgents(ctx context.Context, arg ListUserAgentsParams) ([]AccountUserAgent, error) {
	rows, err := q.db.Query(ctx, listUserAgents,
		arg.Good,
		arg.OrderBy,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountUserAgent
	for rows.Next() {
		var i AccountUserAgent
		if err := rows.Scan(&i.UserAgent, &i.Good); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAgent = `-- name: UpdateUserAgent :one
UPDATE "account"."user_agents"
SET
  good = COALESCE($2, good)
WHERE user_agent = $1
RETURNING user_agent, good
`

type UpdateUserAgentParams struct {
	UserAgent string
	Good      pgtype.Bool
}

func (q *Queries) UpdateUserAgent(ctx context.Context, arg UpdateUserAgentParams) (AccountUserAgent, error) {
	row := q.db.QueryRow(ctx, updateUserAgent, arg.UserAgent, arg.Good)
	var i AccountUserAgent
	err := row.Scan(&i.UserAgent, &i.Good)
	return i, err
}
