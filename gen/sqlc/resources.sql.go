// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: resources.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countResources = `-- name: CountResources :one
SELECT COUNT(resource)
FROM "resource"."resources"
WHERE (
  (resource ILIKE '%' || $1 || '%' OR $1 IS NULL) AND
  (type = $2 OR $2 IS NULL) AND
  (attempts >= $3 OR $3 IS NULL) AND
  (attempts <= $4 OR $4 IS NULL) AND
  (failed = $5 OR $5 IS NULL) AND
  (failed <= $6 OR $6 IS NULL) AND
  (disabled = $7 OR $7 IS NULL)
)
`

type CountResourcesParams struct {
	Resource     pgtype.Text
	Type         NullResourceTypes
	AttemptsFrom pgtype.Int4
	AttemptsTo   pgtype.Int4
	FailedFrom   pgtype.Int4
	FailedTo     pgtype.Int4
	Disabled     pgtype.Bool
}

func (q *Queries) CountResources(ctx context.Context, arg CountResourcesParams) (int64, error) {
	row := q.db.QueryRow(ctx, countResources,
		arg.Resource,
		arg.Type,
		arg.AttemptsFrom,
		arg.AttemptsTo,
		arg.FailedFrom,
		arg.FailedTo,
		arg.Disabled,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createResource = `-- name: CreateResource :one
INSERT INTO "resource"."resources" (resource, type, attempts, failed, disabled)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, resource, type, attempts, failed, disabled, last_used
`

type CreateResourceParams struct {
	Resource string
	Type     ResourceTypes
	Attempts int32
	Failed   int32
	Disabled bool
}

func (q *Queries) CreateResource(ctx context.Context, arg CreateResourceParams) (ResourceResource, error) {
	row := q.db.QueryRow(ctx, createResource,
		arg.Resource,
		arg.Type,
		arg.Attempts,
		arg.Failed,
		arg.Disabled,
	)
	var i ResourceResource
	err := row.Scan(
		&i.ID,
		&i.Resource,
		&i.Type,
		&i.Attempts,
		&i.Failed,
		&i.Disabled,
		&i.LastUsed,
	)
	return i, err
}

const deleteResource = `-- name: DeleteResource :exec
DELETE FROM "resource"."resources"
WHERE (
  id = $1 OR
  resource = $2
)
`

type DeleteResourceParams struct {
	ID       pgtype.Int8
	Resource pgtype.Text
}

func (q *Queries) DeleteResource(ctx context.Context, arg DeleteResourceParams) error {
	_, err := q.db.Exec(ctx, deleteResource, arg.ID, arg.Resource)
	return err
}

const getResource = `-- name: GetResource :one
SELECT id, resource, type, attempts, failed, disabled, last_used
FROM "resource"."resources"
WHERE (
  id = $1 OR
  resource = $2
)
`

type GetResourceParams struct {
	ID       pgtype.Int8
	Resource pgtype.Text
}

func (q *Queries) GetResource(ctx context.Context, arg GetResourceParams) (ResourceResource, error) {
	row := q.db.QueryRow(ctx, getResource, arg.ID, arg.Resource)
	var i ResourceResource
	err := row.Scan(
		&i.ID,
		&i.Resource,
		&i.Type,
		&i.Attempts,
		&i.Failed,
		&i.Disabled,
		&i.LastUsed,
	)
	return i, err
}

const listResources = `-- name: ListResources :many
SELECT id, resource, type, attempts, failed, disabled, last_used
FROM "resource"."resources"
WHERE (
  (resource ILIKE '%' || $1 || '%' OR $1 IS NULL) AND
  (type = $2 OR $2 IS NULL) AND
  (attempts >= $3 OR $3 IS NULL) AND
  (attempts <= $4 OR $4 IS NULL) AND
  (failed = $5 OR $5 IS NULL) AND
  (failed <= $6 OR $6 IS NULL) AND
  (disabled = $7 OR $7 IS NULL)
)
ORDER BY $8 DESC
LIMIT $10
OFFSET $9
`

type ListResourcesParams struct {
	Resource     pgtype.Text
	Type         NullResourceTypes
	AttemptsFrom pgtype.Int4
	AttemptsTo   pgtype.Int4
	FailedFrom   pgtype.Int4
	FailedTo     pgtype.Int4
	Disabled     pgtype.Bool
	OrderBy      interface{}
	Offset       int32
	Limit        int32
}

func (q *Queries) ListResources(ctx context.Context, arg ListResourcesParams) ([]ResourceResource, error) {
	rows, err := q.db.Query(ctx, listResources,
		arg.Resource,
		arg.Type,
		arg.AttemptsFrom,
		arg.AttemptsTo,
		arg.FailedFrom,
		arg.FailedTo,
		arg.Disabled,
		arg.OrderBy,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ResourceResource
	for rows.Next() {
		var i ResourceResource
		if err := rows.Scan(
			&i.ID,
			&i.Resource,
			&i.Type,
			&i.Attempts,
			&i.Failed,
			&i.Disabled,
			&i.LastUsed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateResource = `-- name: UpdateResource :one
UPDATE "resource"."resources"
SET
  resource = COALESCE($1, resource),
  type = COALESCE($2, type),
  attempts = COALESCE($3, attempts),
  failed = COALESCE($4, failed),
  disabled = COALESCE($5, disabled)
WHERE (
  id = $6 OR
  resource = $1
)
RETURNING id, resource, type, attempts, failed, disabled, last_used
`

type UpdateResourceParams struct {
	Resource pgtype.Text
	Type     NullResourceTypes
	Attempts pgtype.Int4
	Failed   pgtype.Int4
	Disabled pgtype.Bool
	ID       pgtype.Int8
}

func (q *Queries) UpdateResource(ctx context.Context, arg UpdateResourceParams) (ResourceResource, error) {
	row := q.db.QueryRow(ctx, updateResource,
		arg.Resource,
		arg.Type,
		arg.Attempts,
		arg.Failed,
		arg.Disabled,
		arg.ID,
	)
	var i ResourceResource
	err := row.Scan(
		&i.ID,
		&i.Resource,
		&i.Type,
		&i.Attempts,
		&i.Failed,
		&i.Disabled,
		&i.LastUsed,
	)
	return i, err
}
