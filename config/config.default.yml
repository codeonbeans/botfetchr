env: "dev" # Available options: dev, staging, production

app:
  name: "botmediasaver"

telegramBot:
  token: "YOUR_TELEGRAM_BOT_TOKEN"
  logDebug: false
  proxy: # Optional proxy settings
    enabled: false # Set to true if you want to use a proxy for Telegram Bot API requests
    type: "socks5" # Available options: socks5, (mtproxy is not supported yet)
    address: ""
    port: 1080
    username: "" # Optional, for authenticated proxies
    password: "" # Optional, for authenticated proxies

mediaSaver:
  useRandomUA: true # Use random user agent for each request
  userAgents: # List of user agents to use if useRandomUA is false, if this also empty, fallback to use random user agent
    - "Mozilla/4.0 (compatible; MSIE 5.0; Series80/2.0 Nokia9500/4.51 Profile/MIDP-2.0 Configuration/CLDC-1.1)"
    - "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Maxthon 2.0)"
  quality: "high" # Available options: low, high
  retryCount: 3 # Number of retries for failed tasks
  timeout: 15 # Timeout in seconds for each task
  maxGroupMediaSize: 30 # Maximum size of media group in MB, if the group exceeds this size, it will be split into multiple messages (should be less than 45MB, Telegram limit is 50MB)

postgres:
  url: "" # "postgresql://doadmin:... Neither url nor host/port/database/username/password is set
  host: "host.docker.internal" # use "host.docker.internal" if you run app inside docker container
  port: "5432"
  database: "botmediasaver"
  username: "khoakomlem"
  password: "peakkhoakomlempassword"
  maxConnections: 8
  maxIdleConnections: 10
  maxConnIdleTime: 30 # seconds
  logQuery: false

redis:
  host: "host.docker.internal" # use "host.docker.internal" if you run app inside docker container
  port: "6379"
  password: "peakkhoakomlempassword"
  db: 0

browserpool:
  headless: true # Run browser in headless mode, set to false if you want to see the browser UI
  poolSize: 10 # Number of browser instances to run concurrently
  proxies: [] # List of proxy URLs to use for browser instances, equals or less than poolSize (protocol://username:password@host:port)
  taskQueueSize: 5 # Maximum number of tasks each browser instance can handle concurrently

log:
  level: "debug" # debug, info, warn, error, dpanic, panic, fatal
  stacktraceLevel: "error"
  fileEnabled: true
  fileSize: 10 # MB
  filePath: "log/log.log"
  fileCompress: false # enable log file compress before rotate
  maxAge: 1 # days to keep log files
  maxBackups: 10 # number of log files
